@page "/"
@using System.Net.Http.Headers
@inject IJSRuntime JS
@inject IHttpClientFactory factory
@inject TokenModel tokenInfo
@inject ILocalStorageService LocalStorage

 @*Hero*@
<section class="hero-section">
    <div class="container text-center bg-img">
        <div class="row">
            <div class="col">
                <h1 class="block__heading">Electronic Store</h1>
                <p class="mb-5">
                    Shopping is a bit of a relaxing hobby for me, which is sometimes
                    troubling for the bank balance.
                </p>
                <a class="mybtn mybtn--primary">Learn More</a>
            </div>
        </div>
    </div>
</section>

 @*Products*@
<section class="products-section pt-5">
    <div class="container ">
        <h1 class="section__heading mb-4">Today's Best Deals For You</h1>
        <ul class="category-taps nav nav-pills" id="pills-tab" role="tablist">
            @foreach (var item in Categories)
            {
                <li class="nav-item" role="presentation" >
                    <button role="tab" class="nav-link ms-2 mt-2" aria-selected="false" data-bs-toggle="pill" @onclick="()=>SelectTap(item.category_id)">@item.Name</button>
                </li>
            }

        </ul>
    <div class="products-container row mt-4">
        @if (categoriesProduct is not null)
        {
            @foreach (var item in categoriesProduct)
            {
                <div class="col col-6 col-xl-3 col-lg-4 col-sm-6  mb-3">
                    <div class="card">
                        <a href="/p">
                        <img  src="https://uploads-ssl.webflow.com/63e857eaeaf853471d5335ff/63e8c4e68b497e229146b818_leptop%20sleeve-min.png" class="card-img-top" alt="...">
                            </a>
                        <div class="card-body">
                            <h5 class="card-title d-flex justify-content-between">@item.name
                                <span class="">@item.price</span>

                            </h5>
                            <p class="card-text">@item.description</p>
                            <button href="#" @onclick="() => AddToCart(item)" class="btn mybtn--outline">Add To Cart</button>
                        </div>
                    </div>
                </div>
            }
        }



    </div>
    </div>

</section>

@*Discount*@
<section class="discount-section pt-5">
    <div class="container">
        <h1 class="section__heading mb-4">Get Up To 70% Off</h1>
        <div class="discount-container row mt-4">
            <div class="col col-6 col-xl-3 col-lg-4  col-sm-6  mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Save</h5>
                        <div class="dicount__price">
                            <span class="dollar--sign">$</span>100
                        </div>
                        <p class="card-text">Explore Our Furniture & Home Furnishing Range</p>
                    </div>
                    <img src="https://uploads-ssl.webflow.com/63e857eaeaf853471d5335ff/63e8c4e6cd367817e964f756_sofa-min.png" class="card-img-top" alt="...">
                </div>
            </div>
            <div class="col col-6 col-xl-3 col-lg-4  col-sm-6  mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Save</h5>
                        <div class="dicount__price">
                            <span class="dollar--sign">$</span>100
                        </div>
                        <p class="card-text">Explore Our Furniture & Home Furnishing Range</p>
                    </div>
                    <img src="https://uploads-ssl.webflow.com/63e857eaeaf853471d5335ff/63e8c4e6cd367817e964f756_sofa-min.png" class="card-img-top" alt="...">
                </div>
            </div>
            <div class="col col-6 col-xl-3 col-lg-4  col-sm-6  mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Save</h5>
                        <div class="dicount__price">
                            <span class="dollar--sign">$</span>100
                        </div>
                        <p class="card-text">Explore Our Furniture & Home Furnishing Range</p>
                    </div>
                    <img src="https://uploads-ssl.webflow.com/63e857eaeaf853471d5335ff/63e8c4e6cd367817e964f756_sofa-min.png" class="card-img-top" alt="...">
                </div>
            </div>
            <div class="col col-6 col-xl-3 col-lg-4  col-sm-6  mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Save</h5>
                        <div class="dicount__price">
                            <span class="dollar--sign">$</span>100
                        </div>
                        <p class="card-text">Explore Our Furniture & Home Furnishing Range</p>
                    </div>
                    <img src="https://uploads-ssl.webflow.com/63e857eaeaf853471d5335ff/63e8c4e6cd367817e964f756_sofa-min.png" class="card-img-top" alt="...">
                </div>
            </div>
        </div>
    </div>
</section>


@code {
    protected List<CategoriesModel> Categories = new();
    private HttpClient? client;
    private IEnumerable<ProductsModel>? products;
    private IEnumerable<ProductsModel>? categoriesProduct;
    protected List<ProductsModel> cart = new();



    protected async override void OnInitialized()
    {
        client = factory.CreateClient("api");
        Categories = await client.GetFromJsonAsync<List<CategoriesModel>>("Categories");
        products = await client.GetFromJsonAsync<List<ProductsModel>>("Products");

        await InvokeAsync(StateHasChanged);
    }

    async Task SelectTap(int id)
    {
        await JS.InvokeVoidAsync("SelectTap");
        categoriesProduct = products.Where(opts => opts.category_id == id);
    }
    private async Task AddToCart(ProductsModel products)
    {
        if (cart is null)
        {

            cart = new List<ProductsModel>();
        }
        var find = cart.Find(p => p.product_id == products.product_id);
        if (find is null)
        {
            cart.Add(products);
            await LocalStorage.SetItemAsync("cart", cart);


        }
        else
        {

            find.ProductAmount += 1;
            products.ProductAmount = find.ProductAmount;
            await LocalStorage.SetItemAsync("cart", cart);
            StateHasChanged();

        }
    }
}
