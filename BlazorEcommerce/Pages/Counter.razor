@page "/counter"
@using System.Net.Http.Json
@using System.Net.Http.Headers
@inject IHttpClientFactory factory
@inject TokenModel tokenInfo
@inject ILocalStorageService LocalStorage
@inject ISyncLocalStorageService sessionStorage


<PageTitle>Counter</PageTitle>




<h1>Products</h1>
@if (products is not null)
{
    @foreach (var p in products)
    {
        <div calss="h2">
            @p.name @p.price @p.ProductAmount
            <button class="btn btn-primary" @onclick="() => AddToCart(p) ">Add To cart</button>
        </div>
    }
    <a href="cart">
        <div>
            @if (cart is not null)
            {
                @cart.Count  <span>items in your cart</span>
            }
            else
            {
                <span> Add items to your Cart bitch   </span>
            }
        </div>

    </a>
}

@code {
    private List<ProductsModel>? products;

    private HttpClient? client;

    private int count;

    protected async override void OnInitialized()
    {
        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenInfo.Token);
        products = await client.GetFromJsonAsync<List<ProductsModel>>("Products");
        await InvokeAsync(StateHasChanged);
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            cart = await LocalStorage.GetItemAsync<List<ProductsModel>>("cart");

            StateHasChanged();
        }
    }


    protected List<ProductsModel> cart = new();



    private async Task AddToCart(ProductsModel products)
    {
        if (cart is null)
        {

            cart = new List<ProductsModel>();
        }
        var find = cart.Find(p => p.product_id == products.product_id);
        if (find is null)
        {
            cart.Add(products);
            await LocalStorage.SetItemAsync("cart", cart);

        }
        else
        {

            find.ProductAmount += 1;
            products.ProductAmount = find.ProductAmount;
            await LocalStorage.SetItemAsync("cart", cart);
            StateHasChanged();

        }
    }
    
   


}
